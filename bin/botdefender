#!/usr/bin/perl -w
use strict;
#use Carp;
use Date::Parse;
use Getopt::Long;
use File::Spec;
#alarm 86400;
$|=1;

# finish sudo session when done
END { system "sudo -K"; }

our %clients;
our %pattern_config;
our @logs;
our $iptables_cmd = "iptables";
# check parameters
sub syntax {
	my ($me) = $0=~m,([^/]+)$,;
	die "Syntax: $me <options>
Where options are
	--help			show this help
	--base <dir>		base directory to check for pattern definitions
	--list			list all known pattern definition types (like apache-access, auth,
				exim4, ...)
	--watch <type>:<file>	watch defined file with patterns according to <type>

Watches log files for modifications, parses new entries to find patterns to find attackers and bots.
Each pattern defines a score which is summed up per IP. If an IP gets more than 100 score points
it is blocked via an iptables rule.
Score points decay by 1 per minute since the last occurrence (matching rules or not). Blocked
IPs are checked by occurrence in iptables rules as they cannot occur in log files anymore. Once a
blocked IP has less then 10 score points it is unblocked again.
So for example if an attacker sends two attack requests each scored with 80 points, he get's 160
total score points and is blocked. With no incoming packets from this IP it will take
	160 - 10 = 150
minutes, so 2:30 hours. Common attack patterns should score quite a bit less than 100,
like e.g. 80 points so that real users are not blocked accidentally.
Definite patterns may be scored > 100 points so that the attacker is immediately blocked.
Common patterns are scored negative so that the user e.g. gets 10 score points for calling a login
page. It works so he starts using the application and normal usage scores -1 per page so that he quickly
proves he's a good guy.
This way users may get negative scores and they're also decayed by 1 per minute so that a user with
e.g. -30 points takes 30 minutes to be neutral again and thus removed from the clients table.
You should pay attention not to score common pages too easily so that an attacker cannot scan for logins
while proving he's harmles by hammering /index.htm.
Maybe you do not want to decrease score that way at all. (To be investigated.)
";
}

my ($base,$list,$help,@watch) = File::Spec->rel2abs(($0=~m,(.*)/,)[0])."/../conf";
GetOptions(
	"help", \$help,
	"base=s", \$base,
	"list", \$list,
	"watch=s", \@watch,
);

if ($list) {
	opendir DH,$base or die "Cannot list config base directory. Cause: $!";
	print "Known log types:\n";
	while (readdir DH) {
		next unless -f "$base/$_";
		next unless /^(.+)\.conf$/;
		print "\t$1\n";
	}
	exit;
}
syntax unless @watch;

# not root? have to prepare using sudo
if ($< != 0) {
	# try to authenticate and call iptables for testing
	# TODO: maybe try all iptables commands we use?
	die "Cannot invoke iptables" if system "sudo -p '[sudo] password for ".(getpwuid($<))[0]." to call iptables: ' $iptables_cmd -nL > /dev/null";
	# that's how we use iptables now: sudo with no prompt
	$iptables_cmd = "sudo -n $iptables_cmd";
	# keep sudo timestamp up to date
	$SIG{ALRM} = sub {
		system "sudo -v";
		alarm 1;
	};
	alarm 1;
}

sub max {
	my $max;
	foreach (@_) {
		next unless defined;
		$max = $_ unless defined $max && $max > $_;
	}
	$max;
}
sub parse_val {
	my $val = shift;
	if ($val =~ /^m(.)(.+?)\1([a-z]*)$/ or $val =~ m,^(/)(.+?)\1([a-z]*)$,) {
		$val = qr/$2/ or die $@;
		# add modifiers
		if ($3) {
			$val = "(?$3:$val)";
			$val = qr/$val/;
		}
	} elsif ($val =~ /^(-?\d+)$/ || $val =~ /^"((?:\\"|[^"])*)"$/ or $val =~ /^'((?:\\'|[^'])*)'$/) {
		$val = $1;
		$val =~ s/\\(.)/$1/g;
	} else {
		die "Invalid value: $val";
	}
	$val;
}

sub read_pattern_config {
	my $type = shift;
	my $file = "$base/$type.conf";
	open(my $fh,"<",$file) or die $!;
	my %conf = (
		var => {},
		match => [],
		file => $file,
	);
	@conf{"size","mtime"} = (stat $fh)[7,9];
	my $section;
	my %flags;
	while (<$fh>) {
		next if /^\s*$/;
		next if /^\s*#/;
		s/^\s+|\s+$//g;
		if (/^\[\s*([^:\]]+?)(?::([^\]]+))?]\s*$/) {
			$section = lc $1;
			%flags = defined $2 ? map {($_,1)} $2=~/([^,]+)/g : ();
			next;
		}
		if ($section eq "var") {
			if (/^\s*(\w+)\s*=\s*(.+)\s*$/) {
				my $var = $1;
				my $val = parse_val $2;
				die "Invalid value $2" unless defined $val;
				$conf{var}->{$var} = $val;
				next;
			}
			die "$@ in $file line $.";
		} elsif ($section =~ /^(-?\d+)$/) {
			my $re = parse_val $_;
			if (ref($re) eq "Regexp") {
				push @{$conf{match}}, {re => $re, score => $section, flags => \%flags};
				next;
			}
			die "Not a RegEx: $_";
		}
	}
	\%conf;
}
sub reread_config {
	my @types = keys %pattern_config;
	foreach my $type (@types) {
		$pattern_config{$type} = read_pattern_config($type);
	}
}
my $SIGHUP=0;
$SIG{HUP} = sub {
	$SIGHUP=1;
};

# there is some new data in this file handle
sub parse_log($) {
	my $log = shift;
	my $fh = $log->{fh};
	my $conf = $pattern_config{$log->{type}};
	while (my $line = <$fh>) {
		my %var;
		foreach my $var (keys %{$conf->{var}}) {
			my $val = $conf->{var}->{$var};
			if (ref($val) eq 'Regexp') {
				if (my @vals = grep {defined} $line =~ /$val/) {
					$var{$var} = join " ",@vals;
				} else {
					$var{$var} = undef;
				}
			} else {
				$var{$var} = $val;
			}
		}
		defined $var{ip} or next;
		my $t = str2time $var{time};
		$t //= $log->{parse}->{time};
		$t //= time();
		$log->{parse}->{time} = $t;

		my $client = $clients{$var{ip}};
		if (! defined $client) {
			$client = { score => 0, ip => $var{ip}, last_seen => $t };
			$clients{$var{ip}} = $client;
		}
		# decay over time
		$client->{score} = effective_score($client, $t);
		$client->{last_seen} = $t;
		
		# check patterns
		my $score = 0;
		foreach my $match (@{$conf->{match}}) {
			next unless $line =~ /$match->{re}/;
			$score=$match->{score};
			last;
		}
		$client->{score}=effective_score($client,$t) + $score;

		# enable for debug:
		#push @{$client->{lines}},{score => $score, line => $line};
		#shift @{$client->{lines}} while @{$client->{lines}} > 10;
	}
}
sub effective_score {
	my $client = shift;
	my $time = shift;
	my $decay = ($time-$client->{last_seen})/60;

	$client->{score} > 0
		? $client->{score} > $decay
			? $client->{score}-$decay
			: 0
		: $client->{score} < -$decay
			? $client->{score}+$decay
			: 0
}
sub get_filter {
	my %filter;
	my @fields;
	foreach (`$iptables_cmd --line-numbers -nvL botdefender -Z`) {
		print;
		next if /^Chain /;
		next if /^Zeroing /;
		if (@fields) {
			my @v = /(\S+)/g;
			my $entry;
			foreach my $i (0..$#fields) {
				$entry->{$fields[$i]} = $v[$i];
			}
			# put into lookup-map
			$filter{$entry->{source}} = $entry;
		} else {
			@fields = /(\w+)/g;
		}
	}
	\%filter;
}

sub update_rules {
	my $time = time();
	my $line=0;
	my $filter = get_filter();

	my @deny;
	my @allow;
	foreach my $client (values %clients) {
		# if packets have been blocked, we saw him:
		$client->{last_seen} = $time if (($filter->{$client->{ip}})//{})->{pkts};

		# if not forget him after 24 hours (at most)
		if ($client->{last_seen} < ($time-24*3600)) {
			delete $clients{$client->{ip}};
			next;
		}

		# effective score with decay
		my $score = effective_score($client,$time);

		# also forget those which are neutral
		if ($score == 0 && ($time-$client->{last_seen}) > 300) {
			delete $clients{$client->{ip}};
			next;
		}

		# now deny the bad guys
		push @deny, $client->{ip} if $score > 100 && !defined $filter->{$client->{ip}};
		# and allow those who behave now
		push @allow, $client->{ip} if $score < 10 && defined $filter->{$client->{ip}};
	}

	# allow those which we don't know anymore
	push @allow,grep {!exists($clients{$_})} keys %$filter;

	print localtime()." - clients:\n";
	print "\t$_->{ip} : ".effective_score($_,$time)."\n" foreach sort {effective_score($a,$time) <=> effective_score($b,$time)} values %clients;
	print "Allow @allow\n" if @allow;
	@allow = sort { $a->{num} <=> $b->{num} } map { $filter->{$_} } @allow;
	for (my $i = 0 ; $i < @allow ; ++$i) {
		system $iptables_cmd,"-D","botdefender",($allow[$i]->{num}-$i);
	}
	print "Deny @deny\n" if @deny;
	system $iptables_cmd,"-I","botdefender","--source",$_,"-j","banned" foreach @deny;
	#system "$iptables_cmd -nvL botdefender";
}

# scan log(s)
foreach (@watch) {eval {
	my ($type,$log) = /^(.+?):(.+)$/;
	die "Not a valid type:file combination: $_" unless defined $type;
	if (! defined($pattern_config{$type}//=read_pattern_config($type))) {
		die "Unknown type name: $type";
		
	}
	die "File not found: $_" unless -e $log;
	die "Not a regular file: $_" unless -f $log;
	die "Cannot read file: $_" unless -r $log;

	$log = {
		file => $log,
		mtime => 0,
		size => 0,
		type => $type,
	};

	open($log->{fh},"<",$log->{file}) or die "Cannot open file: $log->{file} - cause $!";
	push @logs,$log;
	
}}
sub equal($$) {
	return 1 unless defined $_[0];
	return 1 unless defined $_[1];
	$_[0] eq $_[1];
}

my $rtime = time();
die "No logs to watch.\n" unless @logs;
while (1) {
	my $mod = 0;
	foreach my $log (@logs) {
		my @sf = stat($log->{file});
		my @sh = stat($log->{fh});

		# file was re-created
		if (!equal $sh[1], $sf[1]) {
			# finish old
			parse_log $log;
			close ($log->{fh});

			# open new
			open($log->{fh} ,"<",$log->{file}) or die "Cannot open file: $log->{file} - cause $!";
			$log->{mtime} = 0;
			$log->{size} = 0;
			@sh = @sf;
			$mod=1;
		} 

		# some changes?
		if (!equal($sh[7], $log->{mtime}) || !equal($sh[9], $log->{size})) {
			parse_log $log;
			$log->{mtime} = $sh[7];
			$log->{size} = $sh[9];
			$mod=1;
		}
	}

	# update banned ips
	if ($mod || (time > $rtime+30)) {
		update_rules();
		$rtime = time;
	}

	# wait a while
	select undef,undef,undef,.1;
	if ($SIGHUP) {
		reread_config();
		$SIGHUP=0;
	}
}

